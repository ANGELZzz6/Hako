const mongoose = require('mongoose');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

const checkDatabaseStatus = async () => {
  try {
    console.log('üîç Verificando estado de la base de datos...');
    console.log(`üì° URI de conexi√≥n: ${process.env.MONGODB_URI}`);
    
    // Conectar a la base de datos HAKO espec√≠ficamente
    const mongoUri = process.env.MONGODB_URI;
    const uriWithDB = mongoUri.includes('/?') ? mongoUri.replace('/?', '/HAKO?') : mongoUri + '/HAKO';
    
    console.log(`üéØ Conectando a: ${uriWithDB}`);
    
    await mongoose.connect(uriWithDB, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    
    console.log('‚úÖ Conexi√≥n establecida a HAKO');
    
    // Obtener informaci√≥n de la base de datos
    const db = mongoose.connection.db;
    const collections = await db.listCollections().toArray();
    
    console.log(`\nüìä Colecciones encontradas: ${collections.length}`);
    
    for (const collection of collections) {
      const count = await db.collection(collection.name).countDocuments();
      console.log(`  üìã ${collection.name}: ${count} documentos`);
    }
    
    // Verificar si hay datos en colecciones espec√≠ficas
    console.log('\nüîç Verificando colecciones espec√≠ficas:');
    
    const collectionsToCheck = ['usuarios', 'orders', 'appointments', 'payments', 'productos'];
    
    for (const collectionName of collectionsToCheck) {
      try {
        const count = await db.collection(collectionName).countDocuments();
        console.log(`  üìã ${collectionName}: ${count} documentos`);
        
        if (count > 0) {
          // Mostrar algunos documentos de ejemplo
          const sampleDocs = await db.collection(collectionName).find().limit(2).toArray();
          console.log(`    üìÑ Ejemplos:`);
          sampleDocs.forEach((doc, index) => {
            console.log(`      ${index + 1}. ID: ${doc._id}`);
            if (doc.email) console.log(`         Email: ${doc.email}`);
            if (doc.status) console.log(`         Status: ${doc.status}`);
            if (doc.createdAt) console.log(`         Creado: ${doc.createdAt}`);
          });
        }
      } catch (error) {
        console.log(`  ‚ùå Error al verificar ${collectionName}: ${error.message}`);
      }
    }
    
    // Verificar la conexi√≥n
    console.log('\nüîå Estado de la conexi√≥n:');
    console.log(`  - Host: ${mongoose.connection.host}`);
    console.log(`  - Port: ${mongoose.connection.port}`);
    console.log(`  - Database: ${mongoose.connection.name}`);
    console.log(`  - Ready State: ${mongoose.connection.readyState}`);
    
  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error);
  } finally {
    // Cerrar conexi√≥n
    await mongoose.connection.close();
    console.log('üîå Conexi√≥n a la base de datos cerrada');
  }
};

// Ejecutar la verificaci√≥n
checkDatabaseStatus(); 