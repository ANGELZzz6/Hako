const mongoose = require('mongoose');
const Appointment = require('./models/Appointment');
const Order = require('./models/Order');
const User = require('./models/User');

// Configuraci√≥n de la base de datos
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/hako';

async function testDeleteAppointment() {
  try {
    console.log('Conectando a la base de datos...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Conectado a MongoDB');

    // Buscar una cita que no est√© completada
    const appointment = await Appointment.findOne({
      status: { $ne: 'completed' }
    }).populate('user order');

    if (!appointment) {
      console.log('‚ùå No se encontr√≥ ninguna cita para eliminar');
      return;
    }

    console.log(`üìÖ Cita encontrada: ${appointment._id}`);
    console.log(`üë§ Usuario: ${appointment.user.nombre}`);
    console.log(`üìã Estado: ${appointment.status}`);
    console.log(`üìÖ Fecha: ${appointment.scheduledDate}`);
    console.log(`üïê Hora: ${appointment.timeSlot}`);

    // Mostrar productos de la cita
    console.log('\nüì¶ Productos en la cita:');
    appointment.itemsToPickup.forEach((item, index) => {
      console.log(`  ${index + 1}. Producto: ${item.product}`);
      console.log(`     Cantidad: ${item.quantity}`);
      console.log(`     Casillero: ${item.lockerNumber}`);
    });

    // Verificar estado de la orden antes de eliminar
    if (appointment.order) {
      console.log('\nüìã Estado de la orden antes de eliminar:');
      appointment.order.items.forEach((item, index) => {
        console.log(`  ${index + 1}. Producto: ${item.product}`);
        console.log(`     Cantidad total: ${item.quantity}`);
        console.log(`     Reclamados: ${item.claimed_quantity || 0}`);
        console.log(`     Casillero asignado: ${item.assigned_locker || 'Ninguno'}`);
      });
    }

    // Simular eliminaci√≥n (no eliminar realmente en la prueba)
    console.log('\nüîÑ Simulando eliminaci√≥n de cita...');
    
    // Verificar que la cita no est√© completada
    if (appointment.status === 'completed') {
      console.log('‚ùå No se puede eliminar una cita completada');
      return;
    }

    // Simular la l√≥gica de liberaci√≥n de casilleros
    if (appointment.order && appointment.itemsToPickup.length > 0) {
      console.log('üì¶ Liberando casilleros...');
      
      for (const pickupItem of appointment.itemsToPickup) {
        const orderItem = appointment.order.items.find(item => 
          item.product.toString() === pickupItem.product
        );
        
        if (orderItem) {
          const oldClaimed = orderItem.claimed_quantity || 0;
          orderItem.claimed_quantity = Math.max(0, oldClaimed - pickupItem.quantity);
          
          console.log(`  - Producto: ${pickupItem.product}`);
          console.log(`    Reclamados antes: ${oldClaimed}`);
          console.log(`    Reclamados despu√©s: ${orderItem.claimed_quantity}`);
          
          if (orderItem.claimed_quantity === 0) {
            orderItem.assigned_locker = undefined;
            console.log(`    Casillero liberado`);
          }
        }
      }
    }

    console.log('\n‚úÖ Prueba de eliminaci√≥n completada exitosamente');
    console.log('üìù La funcionalidad deber√≠a funcionar correctamente');
    console.log('üí° Para eliminar realmente, usa el bot√≥n en la interfaz de admin');

  } catch (error) {
    console.error('‚ùå Error durante la prueba:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Desconectado de MongoDB');
  }
}

// Ejecutar la prueba
testDeleteAppointment(); 