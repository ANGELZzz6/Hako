// Script para probar el c√°lculo de slots
const SLOT_SIZE = 15; // cm - debe coincidir con gridPackingService

// Funci√≥n para calcular slots necesarios basado en dimensiones
function calculateSlotsNeeded(dimensions) {
  const slotsX = Math.max(1, Math.ceil(dimensions.largo / SLOT_SIZE));
  const slotsY = Math.max(1, Math.ceil(dimensions.ancho / SLOT_SIZE));
  const slotsZ = Math.max(1, Math.ceil(dimensions.alto / SLOT_SIZE));
  return slotsX * slotsY * slotsZ;
}

// Funci√≥n para mostrar informaci√≥n detallada del c√°lculo
function analyzeProduct(dimensions, productName) {
  const slotsX = Math.max(1, Math.ceil(dimensions.largo / SLOT_SIZE));
  const slotsY = Math.max(1, Math.ceil(dimensions.ancho / SLOT_SIZE));
  const slotsZ = Math.max(1, Math.ceil(dimensions.alto / SLOT_SIZE));
  const totalSlots = slotsX * slotsY * slotsZ;
  const volume = dimensions.largo * dimensions.ancho * dimensions.alto;
  
  console.log(`\nüì¶ ${productName}:`);
  console.log(`   Dimensiones: ${dimensions.largo}√ó${dimensions.ancho}√ó${dimensions.alto} cm`);
  console.log(`   Volumen: ${volume.toLocaleString()} cm¬≥`);
  console.log(`   Slots necesarios: ${slotsX}√ó${slotsY}√ó${slotsZ} = ${totalSlots} slots`);
  console.log(`   C√°lculo: Math.ceil(${dimensions.largo}/${SLOT_SIZE}) √ó Math.ceil(${dimensions.ancho}/${SLOT_SIZE}) √ó Math.ceil(${dimensions.alto}/${SLOT_SIZE})`);
  console.log(`   Detalle: Math.ceil(${(dimensions.largo/SLOT_SIZE).toFixed(2)}) √ó Math.ceil(${(dimensions.ancho/SLOT_SIZE).toFixed(2)}) √ó Math.ceil(${(dimensions.alto/SLOT_SIZE).toFixed(2)})`);
  
  return totalSlots;
}

console.log('üßÆ Prueba de c√°lculo de slots para diferentes productos\n');
console.log(`üìè Tama√±o de slot: ${SLOT_SIZE}√ó${SLOT_SIZE}√ó${SLOT_SIZE} cm`);
console.log(`üì¶ Casillero completo: 3√ó3√ó3 = 27 slots (${SLOT_SIZE*3}√ó${SLOT_SIZE*3}√ó${SLOT_SIZE*3} cm)`);

// Probar diferentes productos
const products = [
  { name: 'Sapo', dimensions: { largo: 20, ancho: 10, alto: 40 } },
  { name: 'Producto peque√±o', dimensions: { largo: 10, ancho: 10, alto: 10 } },
  { name: 'Producto mediano', dimensions: { largo: 25, ancho: 15, alto: 20 } },
  { name: 'Producto grande', dimensions: { largo: 35, ancho: 25, alto: 30 } },
  { name: 'Producto muy grande', dimensions: { largo: 50, ancho: 40, alto: 45 } },
  { name: 'Producto extremo', dimensions: { largo: 60, ancho: 50, alto: 50 } },
];

let totalSlotsUsed = 0;

products.forEach(product => {
  const slots = analyzeProduct(product.dimensions, product.name);
  totalSlotsUsed += slots;
});

console.log('\nüìä Resumen:');
console.log(`Total de slots utilizados: ${totalSlotsUsed}`);
console.log(`Casilleros necesarios: ${Math.ceil(totalSlotsUsed / 27)}`);
console.log(`Eficiencia: ${((totalSlotsUsed % 27) / 27 * 100).toFixed(1)}% en el √∫ltimo casillero`);

// Verificar que el sapo use m√°s de 1 slot
const sapoSlots = calculateSlotsNeeded({ largo: 20, ancho: 10, alto: 40 });
console.log(`\n‚úÖ Verificaci√≥n del sapo:`);
console.log(`   Slots calculados: ${sapoSlots}`);
console.log(`   ¬øUsa m√°s de 1 slot? ${sapoSlots > 1 ? '‚úÖ S√ç' : '‚ùå NO'}`);

if (sapoSlots > 1) {
  console.log('üéâ El c√°lculo est√° funcionando correctamente!');
} else {
  console.log('‚ùå Hay un problema en el c√°lculo de slots');
}

// Mostrar ejemplos de c√≥mo se ver√≠a en la interfaz
console.log('\nüñ•Ô∏è Ejemplo de c√≥mo se ver√≠a en la interfaz:');
console.log(`Sapo (20√ó10√ó40 cm): ${sapoSlots}/27 slots (${Math.round(sapoSlots/27*100)}%)`);
console.log(`   Barra de progreso: ${'‚ñà'.repeat(Math.round(sapoSlots/27*20))}${'‚ñë'.repeat(20-Math.round(sapoSlots/27*20))}`); 